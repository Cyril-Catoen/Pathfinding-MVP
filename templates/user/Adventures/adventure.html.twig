{% extends 'user/base.html.twig' %}

{% block link %}
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"/>
{% endblock link %}

{% block metatitle %}
<title>
    Pathfinder - 
    {% if adventure.title %} 
        {{ adventure.title }}  
    {% else %}
        Adventure not found
    {% endif %}
</title>
{% endblock metatitle %}

{% block main %}
<main class="adv-main">
    <section class="container">
        <div class="w100 flex-between pdt-8">
            <div class="flex-start gap-2">
                <a class="arrow-return-button" href="{{ path('dashboard')}}">
                    <i class="fas fa-arrow-left"></i>
                </a> 
                 {% if isOwner %}
                    <form method="post" action="{{ path('update_adventure_title', { id: adventure.id }) }}" id="title-form">
                        
                        {# Affichage normal (titre + bouton) #}
                        <div id="title-view">
                            <div class="flex-between gap-2">
                                <h2>{{ adventure.title ?: 'No title' }}</h2>
                                <button type="button" class="btn-icon" onclick="toggleTitleEdit(true)">
                                    <i class="fas fa-pen"></i>
                                </button>
                            </div>
                        </div>

                        {% set typeIcons = {
                            'hiking':    '<i class="fas fa-person-hiking"></i>',
                            'camping':   '<i class="fas fa-campground"></i>',
                            'alpinism':  '<img src="'~asset('assets/img/icon_ice_axe.png')~'" alt="Alpinism">',
                            'climbing':  '<img src="'~asset('assets/img/icon_climber.png')~'" alt="Climbing">',
                            'whitewater':'<i class="fas fa-water"></i>',
                            'skiing':    '<i class="fas fa-person-skiing"></i>',
                            'caving':    '<img src="'~asset('assets/img/icon_cave2.png')~'" alt="Caving">',
                            'hunting':   '<i class="fas fa-crosshairs"></i>',
                            'fishing':   '<img src="'~asset('assets/img/icon_fishing.svg')~'" alt="Fishing">',
                            'off road':  '<i class="fas fa-motorcycle"></i>',
                            'biking':    '<i class="fas fa-bicycle"></i>',
                            'other(s)':  '<i class="fas fa-pen"></i>'
                        } %}

                        {% if adventure.types|length > 0 %}
                            <div class="adventure-types d-flex gap-2 mt-1 pdl-2">
                                {% for type in adventure.types %}
                                    {% set key = type.name|lower %}
                                    <div class="type-icon-container" 
                                        tabindex="0" 
                                        data-label="{{ type.name|capitalize }}">
                                        {{ typeIcons[key]|raw }}
                                    </div>
                                {% endfor %}
                            </div>
                        {% endif %}


                        {# Bloc d‚Äô√©dition (masqu√© par d√©faut) #}
                        <div id="title-edit-container" class="d-none">
                            <div class="flex-between gap-2">
                                <input 
                                    type="text"
                                    name="title"
                                    id="title-edit"
                                    maxlength="100"
                                    value="{{ adventure.title }}"
                                    class="w100"
                                />
                                <button type="submit" class="btn-icon">üíæ</button>
                                <button type="button" class="btn-icon text-red" onclick="toggleTitleEdit(false)">‚ùå</button>
                            </div>
                        </div>
                    </form>
                {% else %}
                    <h2>{{ adventure.title ?: 'No title' }}</h2>
                {% endif %}

            </div>
            {% if isOwner %}
            <div class="flex-end gap-4">
                <div>
                    <label for="visibility"></label>
                    <select name="visibility" id="visibility">
                        <option value="private" {{ adventure.viewAuthorization == 'private' ? 'selected' }}>Private</option>
                        <option value="public" {{ adventure.viewAuthorization == 'public' ? 'selected' }}>Public</option>
                        <option value="selection" {{ adventure.viewAuthorization == 'selection' ? 'selected' }}>Selection</option>
                    </select>
                </div>
                <div>
                    <form method="post" action="{{ path('update_adventure_status', {'id': adventure.id}) }}">
                        <select name="status" id="status" onchange="this.form.submit()">
                            <option value="preparation" {{ adventure.status.value == 'preparation' ? 'selected' }}>Preparation</option>
                            
                            {% if not anotherOngoing %}
                                <option value="ongoing" {{ adventure.status.value == 'ongoing' ? 'selected' }}>Ongoing</option>
                            {% else %}
                                <option value="ongoing" disabled {{ adventure.status.value == 'ongoing' ? 'selected' }}>Ongoing (d√©j√† en cours)</option>
                            {% endif %}
                            
                            <option value="achieved" {{ adventure.status.value == 'achieved' ? 'selected' }}>Achieved</option>
                        </select>
                    </form>
                </div>
            </div>
            {% else %}
            <div class="w25">
                <p class="button-type-2 button-green">{{ adventure.status.value|capitalize }}</p>
            </div>
            {% endif %}
        </div>

        <div class="w100 flex-between mt-8">
            <div id="photo-data" 
                data-adventure-id="{{ adventure.id }}"
                data-uploaded-count="{{ pictures|length }}"
                data-pictures2='{{ pictures|map(p => { id: p.id, path: asset(p.picturePath) })|json_encode|e("html_attr") }}'
                data-pictures='{{ pictures|map(p => asset(p.picturePath))|json_encode(constant("JSON_UNESCAPED_SLASHES"))|e("html_attr") }}'
                data-delete-url-template="{{ path('adventure_photo_delete', { adventureId: '__AID__', photoId: '__PID__' }) }}">
            </div>
            {% set isAchieved = adventure.status.value == 'achieved' %}
            {% set hasPictures = pictures is not empty %}

            {% if isAchieved %}
                <div class="photo-section w100">
                    {% if isOwner %}
                        {% include 'user/adventures/partials/_photo-display-owner.html.twig' %}
                    {% else %}
                        {% include 'user/adventures/partials/_photo-display-viewer.html.twig' %}
                    {% endif %}
                </div>
            {% else %}
                <div class="adventure-card-empty">
                    <i class="fas fa-hiking"></i>
                </div>
            {% endif %}
        </div>


        <div class="w100 mt-4">
            <h3 class="d-flex gap-2">
                <span>Description</span>
                {% if isOwner %}
                    <button type="button" class="btn-icon" onclick="toggleDescriptionEdit(true)">
                        <i class="fas fa-pen"></i>
                    </button>
                {% endif %}
            </h3>

            {% if isOwner %}
                <form method="post" action="{{ path('update_adventure_description', { id: adventure.id }) }}" id="description-form">
                    <div id="description-view" class="{{ adventure.description is not empty ? '' : 'italic text-muted pdl-2' }}">
                        {{ adventure.description ?: 'No description.' }}
                    </div>

                    <div id="description-edit-container" class="d-none">
                        <div class="mt-2 flex-end gap-2">
                            <button type="submit" class="btn-icon"><i class="far fa-save"></i></button>
                            <button type="button" class="btn-icon" onclick="toggleDescriptionEdit(false)"><i class="fas fa-times"></i></button>
                        </div>

                        <textarea 
                            name="description"
                            id="description-edit"
                            class="w100"
                            rows="5"
                        >{{ adventure.description ?: 'No description.' }}
                        </textarea>
                    </div>
                </form>
            {% else %}
                <p class="{{ adventure.description is not empty ? '' : 'italic text-muted pdl-2' }}">
                    {{ adventure.description ?: 'No description.' }}
                </p>
            {% endif %}
        </div>




        <div class="line-x-separator"></div>

        {% if isOwner %}
        <div class="w100 flex-between wrap mt-4">
            
            <div class="w100 flex-between">
                {% if isOwner %}
                <div class="w45">
                    <label for="start-date-input">START DATE</label>
                    <input type="datetime-local" name="start_date" id="start-date-input"
                            value="{{ adventure.startDate ? adventure.startDate|date('Y-m-d\\TH:i') : '' }}" />
                </div>
                <div class="w45">
                    <label for="end-date-input">END DATE</label>
                    <input type="datetime-local" name="end_date" id="end-date-input"
                            value="{{ adventure.endDate ? adventure.endDate|date('Y-m-d\\TH:i') : '' }}" />
                </div>
                <span id="dates-update-feedback" class="ml-2"></span>
                <span id="dates-update-spinner" style="display:none;">‚è≥</span>
                {% else %}
                <div class="w45">
                    <label>START DATE</label>
                    <input type="datetime-local" value="{{ adventure.startDate ? adventure.startDate|date('Y-m-d\\TH:i') : '' }}" readonly disabled />
                </div>
                <div class="w45">
                    <label>END DATE</label>
                    <input type="datetime-local" value="{{ adventure.endDate ? adventure.endDate|date('Y-m-d\\TH:i') : '' }}" readonly disabled />
                </div>
                {% endif %}
            </div>

            <div class="w100 flex-cl-end mb-4">
                <div class="w100 flex-cl-start">
                    <h3 class="mt-2">FILES</h3>
                </div>
                <div class="uploaded-files" id="uploaded-files-container" data-uploaded-files='{{ adventure.adventureFiles|map(f => {
                    id: f.id,
                    name: f.fileName,
                    type: f.type.value,
                    typeLabel: f.type.label(),
                    typeIcon: f.type.icon(),
                    size: f.size,
                    url: path('download_adventure_file', { id: f.id })
                })|json_encode|e("html_attr") }}'>
                    <!-- Liste g√©n√©r√©e par JS -->
                </div>
                <form id="adventure-file-upload-form" class="w100 flex-cl-between-start gap-2 mt-2" method="post" action="{{ path('upload_adventure_file', { id: adventure.id }) }}" enctype="multipart/form-data">
                        <div class="w100 flex-between">
                            <select name="type" id="adventure-file-type" class="w50" required>
                                <option value="">Type</option>
                                <option value="itinerary">Itinerary</option>
                                <option value="equipment">Gear / Supplies</option>
                                <option value="readme">Readme / Note</option>
                                <option value="other">Other</option>
                            </select>
                            <div for="adventure-file-input" class="w40 like-input">
                                Choose a file
                                <input type="file" name="file" id="adventure-file-input" class="d-none" accept=".pdf,.txt,.doc,.docx,.odt,.csv,.json" required>
                            </div>
                            
                        </div>
                        <div class="w100 flex-end">
                            <button type="submit" class="button-type-1 button-green">Add</button>
                        </div>
                </form>
                <div id="adventure-files-feedback" class="mt-2"></div>
            </div>
        </div>
        {% endif %}
    </section>

    <section id="GPSTrack" class="container">
        <div class="line-x-separator"></div>
        <div class="w100 flex-between mt-4">
            <div class="flex-start w45">
                <h2>GPS TRACK</h2>
            </div>
            {% if isOwner %}
            <form id="adventure-track-upload-form" class="flex-between gap-2 mb-2" method="post" action="{{ path('upload_adventure_track', { id: adventure.id }) }}" enctype="multipart/form-data" class="mb-2">
                <div class="like-input">
                    <label for="track-file-input" >Select a GPS track</label>
                    <input type="file" class="upload-input" name="track" id="track-file-input" accept=".gpx,.csv,.json" required>
                </div>       
                <button type="submit" class="button-type-1 button-green">Upload</button>
                <span id="track-upload-feedback"></span>
            </form>
            {% endif %}
        </div>
        <div id="mapid"
            class="container-type-3 shadow-black"
            data-points='{{ points|map(p => {
                "latitude": p.latitude,
                "longitude": p.longitude,
                "elevation": p.elevation,
                "recordedAt": p.recordedAt|date("c")
            })|json_encode|e("html_attr") }}'>
        </div>

        {% if isOwner %}
        <form id="safety-alert-toggle-form" 
                data-timer-url="{{ path('timer_alert_update', {'id': adventure.id}) }}"
                data-contact-url="{{ path('contact_list_update', {'id': adventure.id}) }}"
                data-toggle-url="{{ path('safety_alert_toggle', {'id': adventure.id}) }}">
            <div class="flex-between relative mb-8 mt-4">
                <div class="flex-start">
                    <h3 class="mt-2 mb-2 gap-2">SAFETY ALERT</h3>
                    <label class="toggle-btn">
                        <input type="checkbox"
                            name="safetyEnabled"
                            id="safetyEnabled"
                            {{ adventure.timerAlert and adventure.timerAlert.isActive ? 'checked' : '' }}>
                        <div class="slider"><div class="ball"></div></div>
                    </label>
                </div>
                <div id="safety-details" class="slide-in-right{% if adventure.timerAlert and adventure.timerAlert.isActive %} active{% endif %} w50">
                <div class="duration-wrapper w45">
                    <label for="duration-input">Timer Alert</label>
                    <input type="text" id="duration-input" readonly placeholder="HH:MM:SS"
                    class="duration-display" value="{{ timerDuration }}" />
                    <div class="duration-picker" id="duration-picker" style="display:none;">
                    <div class="picker-column">
                        {% for h in 0..72 %}
                        <div class="picker-option" data-type="h">{{ "%02d"|format(h) }}</div>
                        {% endfor %}
                    </div>
                    <div class="divider"></div>
                    <div class="picker-column">
                        {% for m in 0..59 %}
                        <div class="picker-option" data-type="m">{{ "%02d"|format(m) }}</div>
                        {% endfor %}
                    </div>
                    <div class="divider"></div>
                    <div class="picker-column">
                        {% for s in 0..59 %}
                        <div class="picker-option" data-type="s">{{ "%02d"|format(s) }}</div>
                        {% endfor %}
                    </div>
                    </div>
                </div>
                <div class="w45">
                    <label for="contact-list-select">Contact list</label>
                    <select id="contact-list-select" name="contact_list_id">
                    {% for list in contactLists %}
                        <option value="{{ list.id }}" {{ adventure.contactList and adventure.contactList.id == list.id ? 'selected' : '' }}>{{ list.name }}</option>
                    {% endfor %}
                    </select>
                </div>
                </div>
            </div>
        </form>
        {% endif %}
    </section>
</main>
{% endblock main %}

{% block script %}

<!-- Script Title -->
<script>
    let isEditingTitle = false;

    function toggleTitleEdit(submitIfEditing = false) {
        const form = document.getElementById('title-form');
        const view = document.getElementById('title-view');
        const edit = document.getElementById('title-edit-container');
        const input = document.getElementById('title-edit');

        if (!form || !view || !edit || !input) return;

        if (isEditingTitle && submitIfEditing) {
            form.submit();
            return;
        }

        isEditingTitle = !isEditingTitle;

        if (isEditingTitle) {
            view.classList.add('d-none');
            edit.classList.remove('d-none');
            input.focus();
        } else {
            edit.classList.add('d-none');
            view.classList.remove('d-none');
        }
    }
</script>

<!-- Script carrousel display-->
<script>
document.addEventListener('DOMContentLoaded', () => {
    const photoData = document.getElementById('photo-data');
    if (!photoData || !photoData.dataset.pictures) return;

    const displayPictures = JSON.parse(photoData.dataset.pictures);
    let displayCarouselIndex = 0;

    function updateDisplayCarousel() {
        const left = document.getElementById('carousel-left');
        const center = document.getElementById('carousel-center');
        const right = document.getElementById('carousel-right');

        const total = displayPictures.length;
        if (total < 4 || !left || !center || !right) return;

        const indexes = [
            (displayCarouselIndex - 1 + total) % total,
            displayCarouselIndex % total,
            (displayCarouselIndex + 1) % total
        ];

        left.src = displayPictures[indexes[0]];
        center.src = displayPictures[indexes[1]];
        right.src = displayPictures[indexes[2]];
    }

    window.prevDisplayCarousel = function () {
        displayCarouselIndex = (displayCarouselIndex - 1 + displayPictures.length) % displayPictures.length;
        updateDisplayCarousel();
    };

    window.nextDisplayCarousel = function () {
        displayCarouselIndex = (displayCarouselIndex + 1) % displayPictures.length;
        updateDisplayCarousel();
    };

    updateDisplayCarousel(); // Appel initial pour afficher les images
});
</script>

<!-- Script photo gallery management -->
<script src="{{ asset('js/adventurePictureManager.js')}}"></script>


<!-- Script Description -->
<script>
    let isEditingDescription = false;

    function toggleDescriptionEdit(submitIfEditing = false) {
        const form = document.getElementById('description-form');
        const view = document.getElementById('description-view');
        const editContainer = document.getElementById('description-edit-container');

        if (isEditingDescription && submitIfEditing) {
            form.submit();
            return;
        }

        isEditingDescription = !isEditingDescription;

        if (isEditingDescription) {
            view.classList.add('d-none');
            editContainer.classList.remove('d-none');
        } else {
            editContainer.classList.add('d-none');
            view.classList.remove('d-none');
        }
    }
</script>

<!-- Script Dates -->
 <script>
document.addEventListener('DOMContentLoaded', function () {
    const startInput = document.getElementById('start-date-input');
    const endInput = document.getElementById('end-date-input');
    const feedback = document.getElementById('dates-update-feedback');
    const spinner = document.getElementById('dates-update-spinner');
    let updateTimeout = null;

    const adventureId = document.querySelector('[data-adventure-id]')?.dataset.adventureId;

    function updateDatesAJAX() {
        // Efface feedback
        feedback.textContent = "";

        // Si l'un des champs est vide, on ne fait rien
        if (!startInput.value || !endInput.value) return;

        // Validation front
        if (startInput.value > endInput.value) {
            feedback.textContent = "La date de d√©but doit pr√©c√©der la date de fin.";
            feedback.style.color = "red";
            return;
        }

        // Affiche spinner
        spinner.style.display = "inline";

        // Anti-spam‚ÄØ: attend 700ms apr√®s la derni√®re frappe pour lancer la requ√™te
        clearTimeout(updateTimeout);
        updateTimeout = setTimeout(() => {
            fetch(`/Pathfinding-MVP/public/user/adventure/${adventureId}/update-dates`, {
                method: 'POST',
                body: new URLSearchParams({
                        start_date: startInput.value,
                        end_date: endInput.value
                }),
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(r => r.json())
            .then(res => {
                spinner.style.display = "none";
                if (res.success) {
                    feedback.textContent = "Dates mises √† jour !";
                    feedback.style.color = "green";
                } else {
                    feedback.textContent = res.error || "Erreur.";
                    feedback.style.color = "red";
                }
            })
            .catch(() => {
                spinner.style.display = "none";
                feedback.textContent = "Erreur r√©seau.";
                feedback.style.color = "red";
            });
        }, 700); // d√©lai pour ne pas spammer √† chaque frappe
    }

    if (startInput && endInput) {
        startInput.addEventListener('change', updateDatesAJAX);
        endInput.addEventListener('change', updateDatesAJAX);
    }
});
</script>



<script src="{{ asset('js/fileManager.js') }}" defer></script>
<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" defer></script>
<script src="{{ asset('js/gps-track.js') }}" defer></script>
<script src="{{ asset('js/timer-picker.js') }}" defer></script>
<script src="{{ asset('js/safety-settings.js') }}" defer></script>

{% endblock script %}